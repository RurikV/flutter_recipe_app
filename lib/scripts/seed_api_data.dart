import 'dart:convert';
import 'dart:io';
import '../data/usecases/recipe_manager_impl.dart';
import '../data/models/recipe.dart';
import '../data/models/ingredient.dart';
import '../data/models/recipe_step.dart';

/// Script to seed the API database with dummy data from the Flutter app
class ApiDataSeeder {
  static const String baseUrl = 'http://localhost:3000';

  // Dummy ingredients from the Flutter app
  static final List<String> dummyIngredients = [
    '–°–æ–µ–≤—ã–π —Å–æ—É—Å',
    '–í–æ–¥–∞',
    '–ú—ë–¥',
    '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Å–∞—Ö–∞—Ä',
    '–ß–µ—Å–Ω–æ–∫',
    '–¢—ë—Ä—Ç—ã–π —Å–≤–µ–∂–∏–π –∏–º–±–∏—Ä—å',
    '–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫',
    '–ö—É–∫—É—Ä—É–∑–Ω—ã–π –∫—Ä–∞—Ö–º–∞–ª',
    '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ',
    '–§–∏–ª–µ –ª–æ—Å–æ—Å—è –∏–ª–∏ —Å—ë–º–≥–∏',
    '–ö—É–Ω–∂—É—Ç',
    '–°–ø–∞–≥–µ—Ç—Ç–∏',
    '–Ø–π—Ü–∞',
    '–°—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω',
    '–ì—É–∞–Ω—á–∏–∞–ª–µ',
    '–ß–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü',
    '–°–≤–µ–∫–ª–∞',
    '–ö–∞–ø—É—Å—Ç–∞',
    '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å',
    '–ú–æ—Ä–∫–æ–≤—å',
    '–õ—É–∫',
    '–¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞',
    '–ü–æ–º–∏–¥–æ—Ä—ã',
    '–û–≥—É—Ä—Ü—ã',
    '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü',
    '–ö—Ä–∞—Å–Ω—ã–π –ª—É–∫',
    '–û–ª–∏–≤–∫–∏',
    '–°—ã—Ä —Ñ–µ—Ç–∞',
    '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ',
    '–õ–æ—Å–æ—Å—å',
    '–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä',
    '–ê–≤–æ–∫–∞–¥–æ',
    '–†–∏—Å –¥–ª—è —Å—É—à–∏',
    '–ù–æ—Ä–∏',
    '–ú–∞—Å–∫–∞—Ä–ø–æ–Ω–µ',
    '–ö–æ—Ñ–µ',
    '–ü–µ—á–µ–Ω—å–µ —Å–∞–≤–æ—è—Ä–¥–∏',
    '–ö–∞–∫–∞–æ',
  ];

  // Dummy units from the Flutter app
  static final List<String> dummyUnits = [
    '—Å—Ç. –ª–æ–∂–∫–∞',
    '—á. –ª–æ–∂–∫–∞',
    '—Å—Ç–∞–∫–∞–Ω',
    '–º–ª',
    '–ª',
    '–≥',
    '–∫–≥',
    '—à—Ç',
    '–∑—É–±—á–∏–∫',
    '–ø–æ –≤–∫—É—Å—É',
    '—â–µ–ø–æ—Ç–∫–∞',
  ];

  /// Seed all data to the API
  static Future<void> seedAllData() async {
    print('üå± Starting API data seeding...');

    try {
      // 1. Create a test user
      await _createTestUser();

      // 2. Seed measure units
      await _seedMeasureUnits();

      // 3. Seed ingredients
      await _seedIngredients();

      // 4. Seed recipes
      await _seedRecipes();

      print('‚úÖ API data seeding completed successfully!');
    } catch (e) {
      print('‚ùå Error during API data seeding: $e');
      rethrow;
    }
  }

  /// Create a test user for the API
  static Future<void> _createTestUser() async {
    print('üë§ Creating test user...');

    final client = HttpClient();
    try {
      final request = await client.postUrl(Uri.parse('$baseUrl/user'));
      request.headers.set('Content-Type', 'application/json; charset=utf-8');

      final userData = {
        'login': 'testuser',
        'password': 'testpassword123',
        'avatar': 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'
      };

      request.add(utf8.encode(jsonEncode(userData)));
      final response = await request.close();

      if (response.statusCode == 200 || response.statusCode == 409) {
        print('‚úÖ Test user created or already exists');
      } else {
        print('‚ö†Ô∏è Failed to create test user: ${response.statusCode}');
      }
    } finally {
      client.close();
    }
  }

  /// Seed measure units to the API
  static Future<void> _seedMeasureUnits() async {
    print('üìè Seeding measure units...');

    final client = HttpClient();
    try {
      for (final unit in dummyUnits) {
        final request = await client.postUrl(Uri.parse('$baseUrl/measure_unit'));
        request.headers.set('Content-Type', 'application/json; charset=utf-8');

        final unitData = {
          'one': unit,
          'few': unit,
          'many': unit,
        };

        request.add(utf8.encode(jsonEncode(unitData)));
        final response = await request.close();

        if (response.statusCode == 200) {
          print('‚úÖ Created measure unit: $unit');
        } else if (response.statusCode == 409) {
          print('‚ö†Ô∏è Measure unit already exists: $unit');
        } else {
          print('‚ùå Failed to create measure unit $unit: ${response.statusCode}');
        }
      }
    } finally {
      client.close();
    }
  }

  /// Seed ingredients to the API
  static Future<void> _seedIngredients() async {
    print('ü•ï Seeding ingredients...');

    final client = HttpClient();
    try {
      for (int i = 0; i < dummyIngredients.length; i++) {
        final ingredient = dummyIngredients[i];
        final request = await client.postUrl(Uri.parse('$baseUrl/ingredient'));
        request.headers.set('Content-Type', 'application/json; charset=utf-8');

        final ingredientData = {
          'name': ingredient,
          'caloriesForUnit': (i * 10 + 50).toDouble(), // Dummy calories
          'measureUnit': {'id': (i % dummyUnits.length) + 1}, // Cycle through measure units
        };

        request.add(utf8.encode(jsonEncode(ingredientData)));
        final response = await request.close();

        if (response.statusCode == 200) {
          print('‚úÖ Created ingredient: $ingredient');
        } else if (response.statusCode == 409) {
          print('‚ö†Ô∏è Ingredient already exists: $ingredient');
        } else {
          print('‚ùå Failed to create ingredient $ingredient: ${response.statusCode}');
        }
      }
    } finally {
      client.close();
    }
  }

  /// Seed recipes to the API
  static Future<void> _seedRecipes() async {
    print('üçù Seeding recipes...');

    final dummyRecipes = RecipeManagerImpl.getDummyRecipes();
    final client = HttpClient();

    try {
      for (final recipe in dummyRecipes) {
        // Create the recipe first
        final recipeRequest = await client.postUrl(Uri.parse('$baseUrl/recipe'));
        recipeRequest.headers.set('Content-Type', 'application/json; charset=utf-8');

        // Convert duration from string to minutes
        int durationMinutes = _parseDuration(recipe.duration);

        final recipeData = {
          'name': recipe.name,
          'duration': durationMinutes,
          'photo': recipe.images.isNotEmpty ? recipe.images.first.path : '',
        };

        recipeRequest.add(utf8.encode(jsonEncode(recipeData)));
        final recipeResponse = await recipeRequest.close();

        if (recipeResponse.statusCode == 200) {
          print('‚úÖ Created recipe: ${recipe.name}');

          // Parse the response to get the recipe ID
          final responseBody = await recipeResponse.transform(utf8.decoder).join();
          final responseData = jsonDecode(responseBody);
          final recipeId = responseData['id'];

          // Create recipe steps
          await _createRecipeSteps(recipe.steps, recipeId);

          // Create recipe ingredients (if any)
          if (recipe.ingredients.isNotEmpty) {
            await _createRecipeIngredients(recipe.ingredients, recipeId);
          }

        } else if (recipeResponse.statusCode == 409) {
          print('‚ö†Ô∏è Recipe already exists: ${recipe.name}');
        } else {
          print('‚ùå Failed to create recipe ${recipe.name}: ${recipeResponse.statusCode}');
        }
      }
    } finally {
      client.close();
    }
  }

  /// Create recipe steps for a recipe
  static Future<void> _createRecipeSteps(List<RecipeStep> steps, int recipeId) async {
    final client = HttpClient();

    try {
      for (int i = 0; i < steps.length; i++) {
        final step = steps[i];

        // First create the recipe step
        final stepRequest = await client.postUrl(Uri.parse('$baseUrl/recipe_step'));
        stepRequest.headers.set('Content-Type', 'application/json; charset=utf-8');

        final stepData = {
          'name': step.name,
          'duration': step.duration,
        };

        stepRequest.add(utf8.encode(jsonEncode(stepData)));
        final stepResponse = await stepRequest.close();

        if (stepResponse.statusCode == 200) {
          final stepResponseBody = await stepResponse.transform(utf8.decoder).join();
          final stepResponseData = jsonDecode(stepResponseBody);
          final stepId = stepResponseData['id'];

          // Then create the recipe step link
          final linkRequest = await client.postUrl(Uri.parse('$baseUrl/recipe_step_link'));
          linkRequest.headers.set('Content-Type', 'application/json; charset=utf-8');

          final linkData = {
            'number': i + 1,
            'recipe': {'id': recipeId},
            'step': {'id': stepId},
          };

          linkRequest.add(utf8.encode(jsonEncode(linkData)));
          final linkResponse = await linkRequest.close();

          if (linkResponse.statusCode == 200) {
            print('  ‚úÖ Created step ${i + 1}: ${step.name.substring(0, 50)}...');
          }
        }
      }
    } finally {
      client.close();
    }
  }

  /// Create recipe ingredients for a recipe
  static Future<void> _createRecipeIngredients(List<Ingredient> ingredients, int recipeId) async {
    final client = HttpClient();

    try {
      for (final ingredient in ingredients) {
        // Find the ingredient ID by name (simplified approach)
        final ingredientId = dummyIngredients.indexOf(ingredient.name) + 1;

        if (ingredientId > 0) {
          final request = await client.postUrl(Uri.parse('$baseUrl/recipe_ingredient'));
          request.headers.set('Content-Type', 'application/json; charset=utf-8');

          final data = {
            'count': int.tryParse(ingredient.quantity) ?? 1,
            'ingredient': {'id': ingredientId},
            'recipe': {'id': recipeId},
          };

          request.add(utf8.encode(jsonEncode(data)));
          final response = await request.close();

          if (response.statusCode == 200) {
            print('  ‚úÖ Added ingredient: ${ingredient.name}');
          }
        }
      }
    } finally {
      client.close();
    }
  }

  /// Parse duration string to minutes
  static int _parseDuration(String duration) {
    // Simple parsing for common formats
    if (duration.contains('—á–∞—Å')) {
      final hours = RegExp(r'(\d+)\s*—á–∞—Å').firstMatch(duration)?.group(1);
      final minutes = RegExp(r'(\d+)\s*–º–∏–Ω—É—Ç').firstMatch(duration)?.group(1);
      return (int.tryParse(hours ?? '0') ?? 0) * 60 + (int.tryParse(minutes ?? '0') ?? 0);
    } else if (duration.contains('–º–∏–Ω—É—Ç')) {
      final minutes = RegExp(r'(\d+)\s*–º–∏–Ω—É—Ç').firstMatch(duration)?.group(1);
      return int.tryParse(minutes ?? '0') ?? 0;
    }
    return 30; // Default to 30 minutes
  }
}

/// Main function to run the seeding script
void main() async {
  await ApiDataSeeder.seedAllData();
}
