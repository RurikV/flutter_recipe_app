# Uncomment this line to define a global platform for your project
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    # Fix for privacy bundle resources
    if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
      target.build_configurations.each do |config|
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end

    # Exclude arm64 architecture for simulator builds to fix issues
    target.build_configurations.each do |config|
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
    end
  end

  # Remove all resource bundle references from build phases
  installer.aggregate_targets.each do |aggregate_target|
    aggregate_target.user_project.targets.each do |user_target|
      user_target.build_phases.each do |build_phase|
        if build_phase.respond_to?(:name) && build_phase.name.include?("Copy")
          build_phase.input_paths = []
          build_phase.output_paths = []
          build_phase.input_file_list_paths = []
          build_phase.output_file_list_paths = []
        end
      end
    end

    # Save the project
    aggregate_target.user_project.save
  end

  # Fix for Flutter.framework symlink issue
  system('rm -rf "${PODS_ROOT}/Flutter/Flutter.framework/Flutter.framework"')

  # More comprehensive fix for nested Flutter.framework issue
  system(<<-EOT
    # Find all app bundles
    find "${PODS_ROOT}/../.." -name "*.app" -type d | while read -r app_bundle; do
      echo "Checking app bundle: $app_bundle"

      # Find the Flutter.framework directory
      flutter_framework=$(find "$app_bundle" -name "Flutter.framework" -type d | head -n 1)

      if [ -n "$flutter_framework" ]; then
        echo "Found Flutter.framework: $flutter_framework"

        # Find any nested Flutter.framework directories
        nested_frameworks=$(find "$flutter_framework" -name "Flutter.framework" -type d)

        if [ -n "$nested_frameworks" ]; then
          echo "Removing nested Flutter.framework directories..."
          for nested_framework in $nested_frameworks; do
            echo "Removing: $nested_framework"
            rm -rf "$nested_framework"
          done
          echo "Fixed Flutter.framework nested framework issue."
        fi
      fi
    done
  EOT
  )
end
